---
import Icon from './Icon.astro';
import ThemeSwitch from './ThemeSwitch.astro';

const url = Astro.url.pathname;
---

<header class="site-header" id="siteHeader">
  <a href="#main" class="skip-link">Skip to content</a>
  <nav id="nav">
    <div class="site-header__inner">
      <div class="site-title"><a href="/">Tyler Combs</a></div>
      <div class="menu-toggle__container">
        <button
          class="menu-toggle"
          id="menuToggle"
          aria-expanded="false"
          aria-controls="menu">
          <span class="visually-hidden">Menu</span>
          <div class="menu-toggle__icon" id="menuToggleIcon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2.5"
              ><path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
              ></path></svg
            >
          </div>
        </button>
      </div>
    </div>
    <ul id="menu">
      <li>
        <a
          href="/about/"
          class={url.toString() === '/about/' ? 'active' : ''}
          aria-current={url.toString() === '/about/' ? 'page' : undefined}
          >About</a
        >
      </li>
      <li>
        <a
          href="/contact/"
          class={url.toString() === '/contact/' ? 'active' : ''}
          aria-current={url.toString() === '/about/' ? 'page' : undefined}
          >Contact</a
        >
      </li>
      <li>
        <a href="https://github.com/tylercombs">
          <span class="visually-hidden">GitHub</span>
          <span class="icon">
            <Icon src="github" fill="currentColor" />
          </span>
        </a>
      </li>
      <li>
        <a href="https://www.linkedin.com/in/tylercombs/">
          <span class="visually-hidden">LinkedIn</span>
          <span class="icon">
            <Icon src="linkedin" fill="currentColor" />
          </span>
        </a>
      </li>
      <li>
        <ThemeSwitch />
      </li>
    </ul>
  </nav>
</header>

<style lang="scss">
  @use '../styles/_mixins.scss' as *;
  @use '../styles/_variables.scss' as *;

  .site-header {
    max-width: 1920px;
    padding: var(--space-md) var(--grid-gutter);
    position: relative;
    width: 100%;

    &.show {
      @media screen and (max-width: calc($mobile-breakpoint - 1px)) {
        background-color: var(--site-header__background-color);
      }
    }
  }

  .site-header__inner {
    align-items: center;
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .site-title {
    font-size: var(--font-size-2xl);
    font-variation-settings: var(--width-expanded);
    font-weight: 800;
    line-height: 1;
    padding-right: var(--space-md);
    text-transform: uppercase;

    a {
      color: var(--black);
      text-decoration: none;
    }
  }

  nav {
    align-items: center;
    display: flex;
    flex-direction: column;
    justify-content: space-between;

    @media screen and (min-width: $mobile-breakpoint) {
      flex-direction: row;
    }
  }

  .menu-toggle__container {
    @media (min-width: $mobile-breakpoint) {
      display: none;
    }

    @at-root .no-js .menu-toggle__container {
      display: none;
    }
  }

  #menu {
    align-items: center;
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
    list-style-type: none;
    margin: 0;
    padding: 0;

    @media (min-width: $mobile-breakpoint) {
      flex-direction: row;
    }

    @at-root .site-header:not(.show) nav ul {
      @media (max-width: calc($mobile-breakpoint - 1px)) {
        @include visually-hidden;
      }
    }

    li a {
      color: var(--nav-link__color);
      display: flex;
      @include font-size('md');
      font-weight: 700;
      padding: var(--space-3xs);
      text-decoration: none;

      .icon {
        display: inline-block;
        width: calc(var(--font-size-md) * 1.4);
        height: calc(var(--font-size-md) * 1.4);
      }
    }
  }

  .skip-link {
    display: inline-block;
    color: var(--color-primary-shade);
    position: absolute;
    top: 1rem;
    left: 1rem;

    &:not(:focus) {
      @include visually-hidden;
    }
  }

  .menu-toggle {
    background-color: var(--menu-toggle__background-color);
    border: none;
    cursor: pointer;
    border-radius: 99rem;
    padding: 0.375rem;

    @at-root .site-header.show nav .menu-toggle {
      background-color: var(--menu-toggle--show__background-color);
    }

    @media (min-width: $mobile-breakpoint) {
      @include visually-hidden;
    }
  }

  .menu-toggle__icon {
    color: var(--white);
    height: 2rem;
    width: 2rem;

    @at-root .site-header.show nav .menu-toggle .menu-toggle__icon {
      display: block;
    }
  }
</style>

<script>
  // Menu Toggle.
  const getFocusableElements = (parent: HTMLElement | null) => {
    if (!parent) {
      console.warn('You need to pass a parent HTMLElement');
      return []; // Return array so length queries will work
    }

    return parent.querySelectorAll(
      'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"]):not([disabled]), details:not([disabled]), summary:not(:disabled)'
    );
  };

  const menuToggle = document.getElementById('menuToggle');
  const header = document.getElementById('siteHeader');
  const menu = document.getElementById('menu');
  const focusableElements = getFocusableElements(menu);

  const openMenu = () => {
    header?.classList.add('show');
    menuToggle?.setAttribute('aria-expanded', 'true');
    focusableElements.forEach((element) => element.removeAttribute('tabindex'));
  };

  const closeMenu = () => {
    header?.classList.remove('show');
    menuToggle?.setAttribute('aria-expanded', 'false');
    focusableElements.forEach((element) =>
      element.setAttribute('tabindex', '-1')
    );
  };

  const mql = window.matchMedia('(min-width: 60rem)');
  if (mql.matches) {
    openMenu();
  }
  mql.onchange = (event) => {
    if (event.matches) {
      openMenu();
    } else {
      closeMenu();
    }
  };

  menuToggle?.addEventListener('click', () => {
    if (header?.classList.contains('show')) {
      closeMenu();
    } else {
      openMenu();
    }
  });
</script>
