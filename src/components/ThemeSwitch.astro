---
import Icon from './Icon.astro';
---

<div class="themeSwitch__container">
  <fieldset id="themeSwitch" aria-label="Theme Switch" role="radiogroup">
    <label>
      <input type="radio" id="system" name="theme" value="system" checked />
      <span class="visually-hidden">System Mode</span>
      <Icon name="system" class="icon" size="1.4em" />
    </label>
    <label>
      <input type="radio" id="light" name="theme" value="light" />
      <span class="visually-hidden">Light Mode</span>
      <Icon name="light" class="icon" size="1.4em" />
    </label>
    <label>
      <input type="radio" id="dark" name="theme" value="dark" />
      <span class="visually-hidden">Dark Mode</span>
      <Icon name="dark" class="icon" size="1.4em" />
    </label>
  </fieldset>
</div>

<style lang="scss">
  @use '../styles/_mixins.scss' as *;
  @use '../styles/_variables.scss' as *;

  .themeSwitch__container {
    --border-radius: 999rem;
    --border-width: 2px;
    border: var(--border-width) solid var(--color-theme-switch-border);
    border-radius: var(--border-radius);
    padding: 2px;
    position: relative;

    &::before {
      content: '';
      background-color: var(--color-theme-switch-background);
      border-radius: var(--border-radius);
      position: absolute;
      inset: calc(var(--border-width) * -1);
      transform: translate(2px, 2px);
      transition: transform 0.3s ease-out;
      z-index: -10;
    }

    &:hover {
      &::before {
        transform: translate(1px, 1px);
        transition: transform 0.1s ease-in;
      }
    }
  }

  #themeSwitch {
    border: 0;
    display: flex;
    margin: 0;
    padding: 0;
    position: relative;

    &::before {
      content: '';
      background-color: var(--color-theme-switch-background-active);
      border-radius: 50%;
      position: absolute;
      top: 0;
      bottom: 0;
      width: calc(100% / 3);
    }

    &.transition::before {
      transition: transform 0.3s ease-in-out;
    }

    &:has(#system:checked)::before {
      transform: translateX(0);
    }

    &:has(#light:checked)::before {
      transform: translateX(100%);
    }

    &:has(#dark:checked)::before {
      transform: translateX(200%);
    }

    input {
      @include visually-hidden;
    }

    &.transition input:checked ~ .icon {
      transition: color 0.3s ease-in-out;
    }

    label {
      align-items: center;
      color: var(--color-theme-switch-icon);
      cursor: pointer;
      display: flex;
      justify-content: center;
      width: 2.25rem;
      height: 2.25rem;
      z-index: 10;

      &:has(input:checked) {
        color: var(--color-theme-switch-icon-active);
      }
    }
  }
</style>

<script>
  // Theme Switch.
  const setTheme = (theme: string) => {
    if (theme) {
      // Update data-theme attr on html.
      document.documentElement.setAttribute('data-theme', theme);
      // Persist in local storage.
      window.localStorage.setItem('theme', theme);
      // Set radio state.
      const radio = document.getElementById(theme) as HTMLInputElement;
      if (radio) {
        radio.checked = true;
      }
    }
  };

  // Set switch state based on html data attr.
  const theme = document.documentElement.dataset.theme;
  const radio = document.getElementById(
    theme ? theme : 'system',
  ) as HTMLInputElement;
  if (radio) {
    radio.checked = true;
  }

  // Add event listeners for theme switches.
  document.querySelectorAll('#themeSwitch input').forEach((element) =>
    element.addEventListener('change', (event) => {
      event.preventDefault();
      // Add transition class to theme switch.
      document.getElementById('themeSwitch')?.classList.add('transition');
      // Set theme on change.
      setTheme((event.target as HTMLInputElement).value);
    }),
  );
</script>
