---
type Props = {
  label: string;
  class?: string;
  href?: string;
  arrow?: boolean;
  icon?: string;
  iconPosition?: 'start' | 'end';
  buttonType?: 'submit' | 'button';
};
const {
  label,
  class: className = '',
  href = '',
  arrow = true,
  icon = '',
  iconPosition = 'start',
  buttonType = 'button',
} = Astro.props;
const Element = href ? 'a' : 'button';
const buttonAttrs = {
  type: Element === 'button' ? buttonType : null,
};
---

<Element class:list={['button', className]} href={href} {...buttonAttrs}>
  {
    icon && iconPosition === 'start' && (
      <span class="icon">
        <slot name="icon" />
      </span>
    )
  }
  {label}
  {
    icon && iconPosition === 'end' && (
      <span class="icon">
        <slot name="icon" />
      </span>
    )
  }
  {
    arrow && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2.5">
        <path d="m13 5 7 7-7 7" />
        <path d="m20 12h-16" />
      </svg>
    )
  }
</Element>

<style>
  .button {
    --background-color: var(--color-button-background-primary);
    --border-color: var(--color-button-border-primary);
    --border-width: 2px;
    --border-radius: calc(
      (
          (1em * var(--line-height-lg)) + (2 * var(--space-2xs)) +
            (2 * var(--border-width))
        ) / 2
    );
    --color: var(--color-button-text-primary);
    --shadow: var(--color-button-shadow-background-primary);

    align-items: center;
    background-color: var(--background-color);
    border: var(--border-width) solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--color);
    cursor: pointer;
    display: flex;
    font-size: var(--font-size-lg);
    font-variation-settings: var(--width-semi-expanded);
    font-weight: 800;
    gap: var(--space-xs);
    justify-content: center;
    line-height: var(--line-height-lg);
    padding: var(--space-2xs) var(--space-md);
    position: relative;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    width: 100%;

    @media screen and (min-width: 36rem) {
      width: auto;
    }

    &::before {
      background-color: var(--shadow);
      border-radius: var(--border-radius);
      content: '';
      position: absolute;
      inset: calc(var(--border-width) * -1);
      z-index: -10;
      transform: translate(4px, 4px);
      transition:
        opacity 0.4s ease-out,
        transform 0.3s ease-out;
    }

    &:hover {
      &::before {
        transform: translate(1px, 1px);
        transition:
          opacity 0.05s ease-in,
          transform 0.1s ease-in;
      }
    }

    &.button--secondary {
      --background-color: var(--color-button-background-secondary);
      --border-color: var(--color-button-border-secondary);
      --color: var(--color-button-text-secondary);
      --shadow: var(--color-button-shadow-background-secondary);

      background-color: var(--background-color);
      position: relative;

      &::before {
        opacity: 1;
      }
    }
  }

  .icon svg {
    display: block;
    height: calc(1em * var(--line-height-lg));
    width: calc(1em * var(--line-height-lg));
  }

  .arrow {
    .point {
      transform: translateX(0.25rem);
    }

    .line {
      opacity: 0;
      transition: opacity 0.3s ease-in;
    }
  }
</style>
