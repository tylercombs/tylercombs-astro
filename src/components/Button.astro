---
import Icon from './Icon.astro';

type Props = {
  label: string;
  class?: string;
  href?: string;
  arrow?: boolean;
  icon?: string;
  iconPosition?: 'start' | 'end';
  buttonType?: 'submit' | 'button';
};
const {
  label,
  class: className = '',
  href = '',
  arrow = true,
  icon = '',
  iconPosition = 'end',
  buttonType = 'button',
} = Astro.props;
const Element = href ? 'a' : 'button';
const buttonAttrs = {
  type: Element === 'button' ? buttonType : null,
};
---

<Element class:list={['button', className]} href={href} {...buttonAttrs}>
  {icon && iconPosition === 'start' && <Icon src={icon} />}
  {label}
  {icon && iconPosition === 'end' && <Icon src={icon} />}
  {
    arrow && (
      <span class="icon">
        <Icon src="arrow" />
      </span>
    )
  }
</Element>

<style lang="scss">
  @use '../styles/_mixins.scss' as *;

  .button {
    align-items: center;
    background-color: transparent;
    border: none;
    border-radius: 999rem;
    display: flex;
    @include font-size('lg');
    font-variation-settings: var(--width-semi-expanded);
    font-weight: 800;
    gap: var(--space-xs);
    justify-content: center;
    padding: var(--space-2xs) var(--space-md);
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    width: 100%;

    @media screen and (min-width: 36rem) {
      width: auto;
    }

    &.button--primary {
      background-color: var(--button--primary__background-color);
      border: 2px solid var(--button--primary__background-color);
      color: var(--button--primary__color);
    }

    &.button--secondary {
      border: 2px solid var(--button--secondary__border-color);
      color: var(--button--secondary__color);
    }
  }

  .icon {
    display: block;
    height: calc(1em * var(--line-height-lg));
    width: calc(1em * var(--line-height-lg));
  }
</style>
