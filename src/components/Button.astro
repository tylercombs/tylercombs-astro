---
import Icon from './Icon.astro';
import type { Icons } from '../components/Icons';

type Props = {
  class?: string;
  href?: string;
  arrow?: boolean;
  icon?: keyof typeof Icons;
  iconPosition?: 'start' | 'end';
  buttonType?: 'submit' | 'button';
};

const {
  class: className = '',
  href = '',
  arrow = true,
  icon = '',
  buttonType = 'button',
  ...rest
} = Astro.props;
const Element = href ? 'a' : 'button';
const buttonAttrs = {
  type: Element === 'button' ? buttonType : null,
};
---

<Element
  class:list={['button', className]}
  href={href}
  {...buttonAttrs}
  {...rest}>
  {icon && <Icon name={icon} size="1.36em" />}
  <slot />
  {arrow && <Icon name="arrow-right" class="arrow" size="1.2em" />}
</Element>

<style lang="scss">
  .button {
    --border-color: var(--color-button-border-primary);
    --border-width: 3px;
    --line-height: 1.34;
    --border-radius: calc(
      (
          (1em * var(--line-height)) + (2 * var(--space-2xs)) +
            (2 * var(--border-width))
        ) / 2
    );
    --color: var(--color-button-text-primary);

    align-items: center;
    background-color: transparent;
    border: var(--border-width) solid transparent;
    border-radius: var(--border-radius);
    color: var(--color);
    cursor: pointer;
    display: flex;
    font-size: var(--font-size-lg);
    font-variation-settings: var(--width-semi-expanded);
    font-weight: 700;
    gap: var(--space-2xs);
    justify-content: center;
    line-height: var(--line-height);
    padding: var(--space-2xs) var(--space-md);
    position: relative;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    width: 100%;

    @media screen and (min-width: 36rem) {
      width: auto;
    }

    .arrow {
      transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);

      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }

    &::before {
      background-color: var(--color-button-background-primary);
      border: var(--border-width) solid var(--border-color);
      border-radius: var(--border-radius);
      content: '';
      position: absolute;
      inset: 0;
      transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1);
      z-index: -1;

      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }

    &:hover {
      &::before {
        transform: scale(1.05);
        transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);

        @media (prefers-reduced-motion: reduce) {
          transition: none;
        }
      }

      .arrow {
        transform: translateX(0.125em);
        transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1);

        @media (prefers-reduced-motion: reduce) {
          transition: none;
        }
      }
    }

    &:focus-visible {
      outline: none;
    }

    &:focus-visible::before {
      outline: 3px solid var(--color-focus-outline);
      outline-offset: 0.5rem;
    }

    &.button--secondary {
      --border-color: var(--color-button-border-secondary);
      --color: var(--color-button-text-secondary);

      position: relative;

      &::before {
        background-color: var(--color-button-background-secondary);
        opacity: 1;
      }
    }
  }
</style>
